service: sinote

plugins:
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-northeast-1
  stage: dev
  memorySize: 128
  timeout: 5
  endpointType: regional
  environment:
    NOTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}'

functions:
  hello:
    handler: handler.hello
    description: POST /hello
    events:
      - http:
          path: hello
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  # category endpoint
  get-category:
    handler: api/category/get-category.handler
    description: GET /categories/{cate_id}
    events:
      - http:
          path: categories/{cate_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-categories:
    handler: api/category/get-categories.handler
    description: GET /categories
    events:
      - http:
          path: categories
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  create-category:
    handler: api/category/create-category.handler
    description: POST /category
    events:
      - http:
          path: categories
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-category:
    handler: api/category/update-category.handler
    description: PATCH /categories/{category_id}
    events:
      - http:
          path: categories/{category_id}
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  # tag endpoint
  get-tag:
    handler: api/tag/get-tag.handler
    description: GET /tags/{tag_id}
    events:
      - http:
          path: tags/{tag_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-tags:
    handler: api/tag/get-tags.handler
    description: GET /tags
    events:
      - http:
          path: tags
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  create-tag:
    handler: api/tag/create-tag.handler
    description: POST /tags
    events:
      - http:
          path: tags
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  # note endpoint
  get-note:
    handler: api/note/get-note.handler
    description: GET /notes/{note_id}
    events:
      - http:
          path: notes/{note_id}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  get-notes:
    handler: api/note/get-notes.handler
    description: GET /notes
    events:
      - http:
          path: notes
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  create-note:
    handler: api/note/create-note.handler
    description: POST /notes
    events:
      - http:
          path: notes
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  update-note:
    handler: api/note/update-note.handler
    description: PATCH /notes/{note_id}
    events:
      - http:
          path: notes/{note_id}
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  change-note-category:
    handler: api/note/change-note-category.handler
    description: POST /notes/{note_id}/change-note-cate
    events:
      - http:
          path: notes/{note_id}/change-note-cate
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.NOTES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: relationship_id
            AttributeType: S
          - AttributeName: create_timestamp
            AttributeType: S
          - AttributeName: update_timestamp
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: relationship_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: create_time-index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: create_timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: update_time-index
            KeySchema:
              - AttributeName: id
                KeyType: HASH
              - AttributeName: update_timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: user-index
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: update_timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
